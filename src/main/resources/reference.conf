#
# Copyright 2016-2020 The Polypheny Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


##
# The configurations for the JGroups cluster
cluster {
    ##
    # Listening port of the JGroups cluster
    # The default is 20590.
    port = 20590

    ##
    # The name of the default (standard) cluster
    # The default is "Polypheny-FRAM".
    name = "Polypheny-FRAM"
}

##
# The configurations belonging to the FRAM protocol pipeline
fram {
    ##
    # The default protocol. One of "PASS_THROUGH", "ROWA", "HASH_FRAGMENTATION".
    # The default is "PASS_THROUGH".
    defaultProtocol = "PASS_THROUGH"
}


##
# The configurations for the standalone mode
standalone {

    ##
    # The JDBC interface
    jdbc {
        ##
        # The port on which the JDBC interface listens for incoming connections.
        # The default is 20591.
        port = 20591

        ##
        # The serialization protocol being used. One of "protobuf" or "json".
        # The default is "protobuf".
        serialization = "protobuf"
    }


    datastore {
        class = "org.polypheny.fram.standalone.HSQLDB"

        jdbc {
            ##
            # The port of the underlying data store.
            # The default is 20589.
            port = 20589

            ##
            # The bind address of the underlying data store. Use "0.0.0.0" to make the data store direct accessible.
            # The default is "127.0.0.1"
            listens = "127.0.0.1"
        }

        catalog {
            ##
            # The name of the database holding internal tables.
            # The default is "fram_catalog".
            name = "fram_catalog"
        }

        database {
            ##
            # The name of the database.
            # The default is "fram".
            name = "fram"
        }

        connection {
            ##
            # HSQLDB specific connection properties
            # Parameter descriptions are copied from http://hsqldb.org/doc/2.0/guide/dbproperties-chapt.html
            hsqldb {
                ##
                # Indicates the transaction control mode for the database. The values, "locks", "mvlocks" and "mvcc" are allowed.
                # The default is "locks".
                tx = "locks"

                ##
                # Indicates the default transaction isolation level for each new session. The values, "read_committed" and "serializable" are allowed. Individual sessions can change their isolation level.
                # The default is "serializable"
                tx_level = "serializable"

                ##
                # When a transaction deadlock or other unresolvable conflict is about to happen, the current transaction is rolled back and an exception is raised. When this property is set false, the transaction is not rolled back. Only the latest action that would cause the conflict is undone and an error is returned. The property should not be changed unless the application can quickly perform an alternative statement and complete the transaction.
                # The default is "true"
                tx_conflict_rollback = true
            }

            ##
            # This overwrites the JDBC connection URL to the underlying data store. If null or empty string, the currently implemented default is used.
            # The default is null.
            #url = ""

            ##
            # The credentials used for the overwritten JDBC connection URL. If null or empty string, the currently implemented default is used.
            # The default is "SA".
            user = "SA"

            ##
            # The credentials used for the overwritten JDBC connection URL. If null or empty string, the currently implemented default is used.
            # The default is "".
            password = ""
        }

        passthrough {
            ##
            # Enables the direct access to the underlying datastore for evaluation purpose.
            # The default is false.
            enabled = false

            ##
            # The port for the JDBC interface of the pass through
            # The default is 20592.
            port = 20592
        }

        getGeneratedKeys {
            ##
            # If the store implements the return of primary keys or the return of specified columns for
            # INSERT, UPDATE, DELETE, and SELECT.
            # The default is "true"
            implemented_for_dmql = true

            ##
            # Works only for patched HSQLDB
            # Possible values: "RETURN_PRIMARY_KEY", "RETURN_GENERATED_KEYS_COL_INDEXES"
            # The default is "RETURN_PRIMARY_KEY"
            return_primary_key_for_dml = "RETURN_PRIMARY_KEY"

            ##
            # Works only for patched HSQLDB
            # Possible values: "RETURN_PRIMARY_KEY", "RETURN_GENERATED_KEYS_COL_INDEXES"
            # The default is "RETURN_PRIMARY_KEY"
            return_primary_key_for_dql = "RETURN_PRIMARY_KEY"

            ##
            # Works only for patched HSQLDB.
            # Possible values: "RETURN_PRIMARY_KEY", "RETURN_GENERATED_KEYS_COL_INDEXES"
            # The default is "RETURN_PRIMARY_KEY"
            tables_without_primary_key = "RETURN_PRIMARY_KEY"
        }
    }



    ##
    # Configurations for micrometer.io JMX registry
    metricsregistry.jmx {
        ##
        # true if publishing is enabled.
        # The default is false.
        enabled = false

        ##
        # The step size (reporting frequency, max decaying) to use.
        # The default is "1 minute".
        step = "1 second"

        ##
        # JMX domain under which to publish metrics.
        # The default is "metrics".
        domain = "metrics"
    }

    ##
    # Configurations for micrometer.io InfluxDB registry
    metricsregistry.influx {
        ##
        # true if publishing is enabled.
        # The default is false.
        enabled = false

        ##
        # The step size (reporting frequency) to use.
        # The default is "1 minute".
        step = "1 second"

        ##
        # The number of threads to use with the scheduler.
        # The default is 2 threads.
        numThreads = 1

        ##
        # The number of measurements per request to use for the backend. If more measurements are found, then multiple requests will be made.
        # The default is 10,000.
        batchSize = 10000

        ##
        # The db to send metrics to.
        # The defaults is "mydb".
        db = "fram"

        ##
        # Authenticate requests with this user. If null, the registry will not attempt to present credentials to Influx.
        # The default is null.
        #userName = null

        ##
        # Authenticate requests with this password.. If null, the registry will not attempt to present credentials to Influx.
        # The default is null.
        #password = null

        ##
        # Influx writes to the DEFAULT retention policy if one is not specified.
        # The default is null.
        #retentionPolicy = null

        ##
        # Time period for which influx should retain data in the current database (e.g. 2h, 52w).
        # The default is null.
        #retentionDuration = null

        ##
        # How many copies of the data are stored in the cluster. Must be 1 for a single node instance.
        # The default is null.
        #retentionReplicationFactor = null

        ##
        # The time range covered by a shard group (e.g. 2h, 52w).
        # The default is null.
        #retentionShardDuration = null

        ##
        # The URI for the Influx backend. If this is an empty string, it disables the InfluxDB registry (see also .enabled)
        # The default is "http://localhost:8086".
        uri = ""

        ##
        # true if metrics publish batches should be GZIP compressed, false otherwise.
        # The default is true.
        compressed = true

        ##
        # true if Micrometer should check if .db exists before attempting to publish metrics to it, creating it if it does not exist.
        # The default is true.
        autoCreateDb = true
    }

    ##
    # Configurations for micrometer.io Prometheus registry
    metricsregistry.prometheus {
        ##
        # true if publishing is enabled.
        # The default is true.
        enabled = false

        ##
        # The step size to use in computing windowed statistics like max. To get the most out of these statistics, align the step interval to be close to your scrape interval.
        # The default is "1 minute".
        step = "1 second"

        ##
        # true if meter descriptions should be sent to Prometheus. Turn this off to minimize the amount of data sent on each scrape.
        # The default is true.
        descriptions = false

        ##
        # The port the service listens to the Prometheus collector.
        # The default is 20593.
        port = 20593

        ##
        # The publishing path.
        # The default is "/".
        path = "/"
    }
}
